<?php
/**
 * Created by PhpStorm.
 * User: Jim FAN
 * Date: 2017/6/17
 * Time: 16:00
 */

namespace app\mobile\controller;
use think\Controller;
use Nocache\mcache;
use think\Cookie;
use think\image\Exception;
use think\Log;

class Base extends  controller
{
    public $memcache = null;
    public $user = null;

    /*
     * 初始化
     */
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->memcache = new mcache();
        try{
            //已经跳转进来的  从cookie 里面读取key
            $session_key  = urldecode(Cookie::get('primaryKey'));
            $res = json_decode(forwarding('dsForwarding', '\app\Service\DS\business\encrypt', 'Xdecrypt',['key'=>$session_key]),true);//解密
            $userInfo = json_decode(base64_decode($res['data']),true);
            if(empty($userInfo['u'])){
                return  $this->loginOut();
            }
            $now = time();
            $user = [
                'u_username' => $userInfo['u'],
                'o_adds' => $userInfo['o'],
                'client_ip' => $userInfo['ip'],
                'u_is_test' => $userInfo['t'],
                'login_time' => $userInfo['lt'],
                'update_time' => $userInfo['ut'],
                'u_site_id' =>$userInfo['s'],
                'user' =>  $userInfo['user'],
            ];
            if($now -$userInfo['ut'] >DS_ONLINE_UPDATE_TIME){//如果请求距离上一次请求时间过了DS_ONLINE_UPDATE_TIME 秒【可以看情况而定 】 更新数据库session信息
                $server = $this->request->server();
                $session['s_id'] = $userInfo['sd'];
                $session['s_update_time'] = date("Y-m-d H:i:s");
//                $session['s_client_ip'] = $server['REMOTE_ADDR'];
                $session['s_server_ip'] = $server['SERVER_ADDR'];
                //更新数据库session信息
                json_decode(forwarding('UserForwarding', '\app\Service\users\business\sessions', 'updateFrontSession',$session),true);
                $userInfo['ut'] = $now;
            }
            $encrypt = json_decode(forwarding('dsForwarding', '\app\Service\DS\business\encrypt', 'Xencrypt', ['key'=>base64_encode(json_encode($userInfo))]),true);//加密
            Cookie::set('primaryKey', urlencode($encrypt['data']),DS_ONLINE_TIME);
            $this->user = $user;
        }catch(Exception $e){
            Log::record('mobile端base：'.$e->getMessage(),'error');
            $this->user = null;
        }
    }

    /**
     * 登录过期重新登录
     */
    public function reLogin(){
        $primarKey = $this->request->post('primaryKey');
        $server = $this->request->server();
        try{
            $res = json_decode(forwarding('dsForwarding', '\app\Service\DS\business\encrypt', 'Xdecrypt',['key'=>urldecode($primarKey)]),true);//解密
            $userInfo = json_decode(base64_decode($res['data']),true);
            $session = [];
            $session['s_username'] = $userInfo['u'];
            $session['s_pan'] = $userInfo['o'];
            $session['s_top4'] = $userInfo['user']['u_top_4'];
            $session['s_top3'] = $userInfo['user']['u_top_3'];
            $session['s_top2'] = $userInfo['user']['u_top_2'];
            $session['s_top1'] = $userInfo['user']['u_top_1'];
            $session['s_login_time'] = date("Y-m-d H:i:s");
            $session['s_update_time'] = date("Y-m-d H:i:s");
            $session['s_client_ip'] = $server['REMOTE_ADDR'];
            $session['s_server_ip'] = $server['SERVER_ADDR'];
            if(time() - $userInfo['lt']>60*60*2){//超过两个小时未连接就算登录失败了
                return false;
            }
            $utime = date("Y-m-d H:i:s",$userInfo['ut']);
            $session_status = json_decode(forwarding('UserForwarding', '\app\Service\users\business\sessions', 'addFrontSession',$session),true);
            if($session_status['data']){
                $userInfo['lt'] = time();
                $userInfo['ut'] = time();
                $encrypt = json_decode(forwarding('dsForwarding', '\app\Service\DS\business\encrypt', 'Xencrypt', ['key'=>base64_encode(json_encode($userInfo))]),true);//加密
                Cookie::set('primaryKey', urlencode($encrypt['data']),DS_ONLINE_TIME);
                $logs = [
                    'u_id'  => '',
                    'u_username'   => $userInfo['u'],
                    'u_control'    => 'mobile/base',
                    'u_action'     => 'reLogin',
                    'u_is_success' => '1',
                    'u_remark'     => '手机端用户登出时间：'.$utime."重新登录时间".$session['s_login_time'],
                    'u_client_ip'  => $server['REMOTE_ADDR'],
                    'u_proxy_ip'   => $server['SERVER_ADDR'],
                    'u_domain'     => $server['HTTP_HOST'],
                ];
                addLogs($logs);
                return  true;
            }else{
                $logs = [
                    'u_id'  => '',
                    'u_username'   => $userInfo['u'],
                    'u_control'    => 'mobile/base',
                    'u_action'     => 'reLogin',
                    'u_is_success' => '0',
                    'u_remark'     => '手机端用户登出时间：'.$utime."重新登录时间".$session['s_login_time']."加密失败",
                    'u_client_ip'  => $server['REMOTE_ADDR'],
                    'u_proxy_ip'   => $server['SERVER_ADDR'],
                    'u_domain'     => $server['HTTP_HOST'],
                ];
                addLogs($logs);
                return false;
            }
        }catch (Exception $e){
            Log::record("登录过期重新登录部分：".$e->getMessage(),'error');
            return  false;
        }
    }
    /**
     * 用户以及离线，请重新登录
     */
    public function loginOut(){
        session('user',null);
        Cookie::delete('primaryKey');
        $this->assign('url', 'javascript:;');
        $this->assign('message', "用户已经超时，请重新登录！");
        return $this->fetch('./message');
    }
    /**
     * 用户在另一地方登录，请重新登录
     */
    public function loginReset(){
        session('user',null);
        Cookie::delete('primaryKey');
        $this->assign('url', 'javascript:;');
        $this->assign('message', "用户在另一地方登录，请重新登录！");
        return $this->fetch('./message');
    }
    /**
     * 验证彩种id
     * @param $lid
     * @return bool
     */
    public function checkLotteryId($lid){
        $arr = [
            '2' => '重庆时时彩',
            '26'=>'山东11选5',
            '8' => '新疆时时彩',
            '27'=>' 江西11选5',
            '24'=> '广东11选5',
            '14'=> '天津时时彩',
            '28'=> '福彩3D',
            '29'=> '排列三/五',
            '9' => '江苏快三',
            '30'=> '湖北快3',
            '6' => ' 北京赛车'];
        if(empty($arr[$lid])){
            return false;
        }else{
            return true;
        }
    }

    /**
     * 判断站点运营状态
     */
    public function is_run(){
        $data = $this->memcache->get('user','is_run');
        if(empty($data)){
            $res = json_decode(forwarding('lotteryForwarding', '\app\Service\lottery\business\config', 'getSystemConf', []),true);
            $data =$res['data'];
            $this->memcache->set('user','is_run',$data,10);
        }
        if(empty($data['status']['web_status'])){
            return ['status'=>false,'message'=>''];
        }
        $time = time();
        if(($time<strtotime($data['start']['start_time']))&&($time>strtotime($data['end']['end_time']))){
            return ['status'=>false,'message'=>'休市时间:'.$data['start']['start_time']."----".$data['end']['end_time']];
        }
        return ['status'=>true,'message'=>'网站维护中，请示稍后再试！'];
    }

}